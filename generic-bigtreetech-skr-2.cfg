# This file contains common pin mappings for the BigTreeTech SKR 2. To use this config, the firmware should be compiled for the STM32F407 with a "32KiB bootloader".


# In newer versions of this board shipped in late 2021 the STM32F429
# is used, if this is the case compile for this with a "32KiB bootloader"
# You will need to check the chip on your board to identify which you have.
#
# The "make flash" command does not work on the SKR 2. Instead,
# after running "make", copy the generated "out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the SKR 2
# with that SD card.

# See docs/Config_Reference.md for a description of parameters.

# Note: The initial revision of this board has a flaw that can cause
# damage to itself and other boards. Be sure to verify the board is
# not impacted by this flaw before using it.

[stepper_x]
step_pin: PE2
dir_pin: !PE1
enable_pin: !PE3
microsteps: 64
rotation_distance: 40
endstop_pin: !PC1
position_endstop: 0
position_max: 220
homing_speed: 30


[tmc2208 stepper_x]
uart_pin: PE0
run_current: 1.0
stealthchop_threshold: 999999
	
[stepper_y]
step_pin: PD5
dir_pin: !PD4
enable_pin: !PD6
microsteps: 64
rotation_distance: 40
endstop_pin: !PC3
position_endstop: 220
position_max: 220
homing_speed: 30


[tmc2209 stepper_y]
uart_pin: PD3
run_current: 1.0
stealthchop_threshold: 999999

[stepper_z]
step_pin: PA15
dir_pin: !PA8
enable_pin: !PD1
microsteps: 16
rotation_distance: 8
full_steps_per_rotation: 800
#endstop_pin: ^PC0
endstop_pin: probe:z_virtual_endstop
#position_endstop: 0.5
position_max: 200
position_min: -2
homing_speed: 5


[tmc2209 stepper_z]
uart_pin: PD0
run_current: 0.8
diag_pin:
stealthchop_threshold: 999999


[extruder]
step_pin: PD15
dir_pin: !PD14
enable_pin: !PC7
microsteps: 16
rotation_distance: 7.87149779844046
full_steps_per_rotation: 200
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PB3
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA2
#control: pid
#pid_Kp: 22.2
#pid_Ki: 1.08
#pid_Kd: 114
min_temp: 0
max_temp: 250
pressure_advance: 0.200

[tmc2209 extruder]
uart_pin: PC6
stealthchop_threshold: 999999
run_current: 0.800

[heater_bed]
heater_pin: PD7
sensor_type: Generic 3950
sensor_pin: PA1
#control: watermark
min_temp: 0
max_temp: 130


[fan]
pin: PB7
kick_start_time: 0.100
max_power: .50


[heater_fan fan_heater]
pin: PB6
heater: extruder
heater_temp: 50.0

[verify_heater heater_bed]
check_gain_time: 90

#[verify_heater extruder]
#check_gain_time: 30
#max_error: 300




#[heater_fan fan2]
#pin: PB5

# Due to BTT implementing a Marlin-specific safety feature,
# "anti-reversal stepper protection", this pin needs pulling
# high to pass power to stepper drivers and most FETs

[output_pin motor_power]
pin: PC13
value: 1

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f429xx_2C002E000251303330363837-if00
restart_method: command


[printer]
#kinematics: cartesian
kinematics: corexy
#max_velocity: 300
#max_accel: 3000
#max_z_velocity: 5
#max_z_accel: 50

##max speed
max_velocity: 300 
max_accel: 5000
max_z_velocity: 10
max_z_accel: 50
max_accel_to_decel: 2500
square_corner_velocity: 5

#[input_shaper]
#shaper_freq_y: 101.9  # frequency for the X mark of the test model
#shaper_freq_x: 137.0  # frequency for the Y mark of the test model
#shaper_type: ei


########################################
# EXP1 / EXP2 (display) pins
########################################


[board_pins]
aliases:
#    # EXP1 header
    EXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE10, EXP1_7=PE12, EXP1_9=<GND>,
    EXP1_2=PB0, EXP1_4=PE9, EXP1_6=PE11, EXP1_8=PE13, EXP1_10=<5V>,
#    # EXP2 header
    EXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,
    EXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>


[display]
lcd_type: uc1701 
cs_pin: EXP1_3
a0_pin: EXP1_4 
rst_pin: EXP1_5 
contrast: 63 
encoder_pins: ^EXP2_5, ^EXP2_3 
click_pin: ^!EXP1_2 
spi_bus: spi1

[display_status]

[output_pin beeper]
pin: EXP1_1

[neopixel fysetc_mini12864]
pin: EXP1_6
chain_count: 3
color_order: RGB
initial_RED: 1.0
initial_GREEN: 0.6
initial_BLUE: 0.5
#GREEN=0.6 RED=1 BLUE=0.5

[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
        SET_LED LED=fysetc_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
        SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
        SET_LED LED=fysetc_mini12864 RED=1 GREEN=0.6 BLUE=0.5 INDEX=3 




[safe_z_home]
home_xy_position: 100, 170 # Change coordinates to the center of your print bed
speed: 150
z_hop: 10                 # Move up 10mm
z_hop_speed: 5


[bltouch]
speed: 2
lift_speed: 5
sensor_pin: ^PE4
control_pin: PE5
x_offset: 0.0
y_offset: -50
z_offset: 1.70
pin_move_time: 1.0
samples: 5
sample_retract_dist: 3.0
samples_result: median
samples_tolerance_retries: 5
samples_tolerance: 0.150

[filament_switch_sensor filament]
pause_on_runout: True
switch_pin: PC2




#pin_up_touch_mode_reports_triggered: true

#[probe]
#samples_tolerance: .1		#how much of a difference there can be before it triggers a retest, there is a default if you don't specify
#samples_tolerance_retries: 3	#how many times you want it to retry before failing.



[bed_mesh]
speed: 100
horizontal_move_z: 10
mesh_min: 10, 10  #Change coordinates to match your printer
mesh_max: 210, 170 #Change coordinates to match your printer
probe_count: 6,6 #Change number of X,Y probe points
algorithm: lagrange
fade_start: 1
fade_end: 10
fade_target: 0

[bed_screws]
screw1: 5.0, 5.0
screw2: 203.0, 5.0
screw3: 203.0, 203.0
screw4: 5.0, 203.0
speed: 150


[force_move]
enable_force_move: true



[gcode_macro M280]
gcode:
  {% if params.S == '90' %}
	BLTOUCH_DEBUG COMMAND=pin_up
  {% endif %}
  {% if params.S == '10' %}
	BLTOUCH_DEBUG COMMAND=pin_down
  {% endif %}
  {% if params.S == '120' %}
	BLTOUCH_DEBUG COMMAND=self_test
  {% endif %}
  {% if params.S == '160' %}
	BLTOUCH_DEBUG COMMAND=reset
  {% endif %}


#[gcode_macro M117]
#gcode:
#        G0

#[gcode_macro M73]
#gcode:
#        G0

[gcode_macro G29]
gcode:
 G28
 BED_MESH_CALIBRATE
 BED_MESH_PROFILE SAVE=p1
 G1 X110 Y110 Z10 F4000



[virtual_sdcard]
path: ~/gcode_files
 
# Support for gcode arc (G2/G3) commands.
[gcode_arcs]
resolution: 1.0
#   An arc will be split into segments. Each segment's length will
#   equal the resolution in mm set above. Lower values will produce a
#   finer arc, but also more work for your machine. Arcs smaller than
#   the configured value will become straight lines. The default is
#   1mm.
  
[pause_resume]
 
#[display_status]
 
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_minimum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 
 
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}
 

[gcode_macro clean_nozzle]
gcode:
  {% set wipe_count = 8 %}
  SAVE_GCODE_STATE NAME=clean_nozzle_state
  G90
  G0 Z15 F300
  {% for wipe in range(wipe_count) %}
    {% for coordinate in [(218, 4),(100, 4)] %}
      G0 X{coordinate[0]} Y{coordinate[1] + 0.25 * wipe} Z9.7 F12000
    {% endfor %}
  {% endfor %}
  RESTORE_GCODE_STATE NAME=clean_nozzle_state


#[gcode_macro CANCEL_PRINT]
#rename_existing: BASE_CANCEL_PRINT
#gcode:
#  TURN_OFF_HEATERS
#  CLEAR_PAUSE
#  SDCARD_RESET_FILE
#  BASE_CANCEL_PRINT

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  -0.118750, -0.098750, -0.055625
#*# 	  0.100625, 0.030000, -0.163750
#*# 	  0.126875, 0.045625, -0.064375
#*# tension = 0.2
#*# min_x = 10.0
#*# algo = lagrange
#*# y_count = 3
#*# mesh_y_pps = 2
#*# min_y = 10.0
#*# x_count = 3
#*# max_y = 170.0
#*# mesh_x_pps = 2
#*# max_x = 210.0
#*#
#*# [bed_mesh p1]
#*# version = 1
#*# points =
#*# 	  -0.118750, -0.098750, -0.055625
#*# 	  0.100625, 0.030000, -0.163750
#*# 	  0.126875, 0.045625, -0.064375
#*# tension = 0.2
#*# min_x = 10.0
#*# algo = lagrange
#*# y_count = 3
#*# mesh_y_pps = 2
#*# min_y = 10.0
#*# x_count = 3
#*# max_y = 170.0
#*# mesh_x_pps = 2
#*# max_x = 210.0
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 21.548
#*# pid_ki = 0.933
#*# pid_kd = 124.440
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 70.494
#*# pid_ki = 1.386
#*# pid_kd = 896.156
